#+STARTUP: overview

* Directives
;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

* Who is it?
#+BEGIN_SRC emacs-lisp :tangle yes

(setq user-full-name "Aaron Strick"
      user-mail-address "aaronstrick@gmail.com")

#+END_SRC

* Load Paths

For example $DOOM_DIR/packages/my_package/files.el

#+BEGIN_SRC emacs-lisp :tangle yes

(let ((default-directory (expand-file-name "packages" doom-private-dir)))
  (normal-top-level-add-subdirs-to-load-path))

#+END_SRC

* Appearances

Doom exposes the following:
    doom-font: the primary font to use
    doom-variable-pitch-font: a non-monospace font (where applicable)
    doom-big-font: used for `doom-big-font-mode’; use this for presentations or streaming.
    doom-unicode-font: for unicode glyphs
    doom-serif-font: for the `fixed-pitch-serif’ face

#+BEGIN_SRC emacs-lisp :tangle yes

(setq doom-font (font-spec :family "Fira Code" :size 14))
(setq doom-variable-pitch-font (font-spec :family "Gill Sans" :size 14))

;;(setq doom-theme 'doom-horizon)
(setq doom-theme 'ef-dark)

#+END_SRC

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. To use relative line numbers, set this to `relative'.
#+BEGIN_SRC emacs-lisp :tangle yes

(setq display-line-numbers-type t)
(setq frame-title-format nil)
(add-hook 'emacs-startup-hook #'toggle-frame-maximized)
(use-package! hide-mode-line
  :config
  (global-hide-mode-line-mode 1))



#+END_SRC

** Cleanup dired a bit

#+begin_src :tangle yes

(add-hook 'dired-mode-hook #'dired-hide-details-mode)

#+end_src

* Random
#+BEGIN_SRC emacs-lisp :tangle yes
;; I needed this to get some EWW webpages to load.
;; I don't really use that anymore, but I feel like this is a reasonable fix to keep.
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC

* Bindings

#+BEGIN_SRC emacs-lisp :tangle yes

(map!
    :leader
    :desc "Project Eshell" :gn "p SPC" #'project-eshell
    :desc "Toggle modeline" :gn "t m" #'global-hide-mode-line-mode
    :desc "dirvish" :gn "-" #'dirvish
    )
#+END_SRC

* LSP

#+begin_src emacs-lisp :tangle yes

(after! lsp-mode
  (setq lsp-lens-enable nil)
  (setq lsp-ui-doc-enable nil)
  (setq lsp-ui-sideline-enable nil)

  )

(map!
    :leader
    :desc "Next error" :gn "e j" #'flycheck-next-error
    :desc "Previous error" :gn "e k" #'flycheck-previous-error
    :desc "List errors" :gn "e l" #'flycheck-list-errors
    )

#+end_src
* Completion

#+begin_src emacs-lisp :tangle yes

(after! corfu
  (setq corfu-auto nil)
  )

(map! :i "C-SPC" #'completion-at-point)

#+end_src

* Typescript
#+begin_src emacs-lisp :tangle yes

;; enable typescript-tslint checker
(after! flycheck
  (flycheck-add-mode 'javascript-eslint 'web-mode)
 )
#+end_src

* ChatGPTShell
#+begin_src emacs-lisp :tangle yes

(use-package! chatgpt-shell
  :config
  (setq chatgpt-shell-openai-key
        (lambda ()
            (auth-source-pick-first-password :host "api.openai.com")))

  (setq chatgpt-shell-always-create-new nil))


(use-package! claude-code-ide
  :custom (claude-code-ide-terminal-backend 'eat)
  )
  ;; :bind ("C-c C-'" . claude-code-ide-menu)
  ;; :config
  ;; (claude-code-ide-emacs-tools-setup))
#+end_src



* Second Brain stuff

#+begin_src emacs-lisp :tangle yes

(setq deft-directory "~/brain")
(setq deft-recursive t)
(setq deft-use-filename-as-title t)
(map!
    :leader
    :desc "Deft File" :gn "n f" #'deft-find-file)


;; https://emacs.stackexchange.com/questions/71100/pasting-images-from-clipboard-into-orgmode
(after! org-download
      (setq org-download-method 'directory)
      (setq org-download-image-dir (concat (file-name-sans-extension (buffer-file-name)) "-img"))
      (setq org-download-image-org-width 600)
      (setq org-download-link-format "[[file:%s]]\n"
        org-download-abbreviate-filename-function #'file-relative-name)
      (setq org-download-link-format-function #'org-download-link-format-function-default))

(after! org-journal
  (setq org-journal-dir "~/brain/Inbox/")
  (setq org-journal-file-format "%Y-%m-%d.md")
  (setq org-journal-date-format "%Y-%m-%d")
  (setq org-journal-date-prefix "# ")
  (setq org-journal-time-prefix "\n## ")
  )
#+end_src


* Habits
I've been using[[https:xenodium.com][ xenodium]]'s flat habits, but I want to be able to super quickly mark things on my computer. org-habit weirdly doesn't seem to have support for this... I guess because they expect you to fully be on org mode (which I'm not). So this code allows me to update the habits
#+begin_src emacs-lisp :tangle yes

(setq strk/habit-file "~/Library/Mobile Documents/com~apple~CloudDocs/Org/MyHabits.org")
(after! org
  (add-to-list 'org-modules 'org-habit)
  (add-to-list 'org-agenda-files strk/habit-file))

(defun strk/open-habits-file ()
    "Open my habit file"
    (interactive)
    (find-file strk/habit-file))

(defun strk/_habit-candidates ()
  "Return an alist of (HEADING . MARKER) for all headings with STYLE=\"habit\" in `strk/habit-file'."
  (let* ((file (expand-file-name strk/habit-file))
         (buf (find-file-noselect file)))
    (with-current-buffer buf
      (org-mode) ;; ensure org functions are available
      (let (result)
        (org-map-entries
         (lambda ()
           ;; store a copy-marker so it stays valid across buffer changes
           (let ((title (org-get-heading t t t t))
                 (m (copy-marker (point))))
     (push (cons title m) result)))
         "STYLE=\"habit\"" ;; match entries marked as habits
         'file)
        (nreverse result))))) ;; return in buffer order


;;;###autoload
(defun strk/mark-habit-done ()
  "Prompt for a habit (from `strk/habit-file') and mark the chosen one DONE.

This uses the headline text for completion. When the headline is marked DONE,
Org's normal state-change/logging code will run (so REPEAT_TO_STATE, LOGGING,
and repeaters like .+1d are respected). The habit file is saved afterward."
  (interactive)
  (let* ((cands (strk/_habit-candidates)))
    (unless cands
      (user-error "No habits found in %s" strk/habit-file))
    (let* ((names (mapcar #'car cands))
           (choice (completing-read "Habit: " names nil t))
           (marker (cdr (assoc choice cands))))
      (unless marker
        (user-error "Selection not found"))
      (let ((buf (marker-buffer marker)))
        (unless (buffer-live-p buf)
          (user-error "Buffer for habit file not available"))
        (with-current-buffer buf
          ;; go to the heading and mark DONE
          (goto-char (marker-position marker))
          (org-back-to-heading t)
          ;; Use a canonical DONE keyword; if you have different keywords,
          ;; you can change "DONE" to your desired keyword or compute it.
          (org-todo "DONE")
          (save-buffer)))
      (message "Marked habit %s DONE" choice))))

(map!
   :leader
   :desc "Open Habit File" :gn "d f" #'strk/open-habits-file
   :desc "Capture Habit" :gn "d c" #'strk/mark-habit-done)
#+end_src
