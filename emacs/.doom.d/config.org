* Directives
;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

* Personal Info

(Came w/ doom)

#+BEGIN_SRC emacs-lisp

(setq user-full-name "Aaron Strick"
      user-mail-address "aaronstrick@gmail.com")

#+END_SRC

* Org


** Zettel

*** Setup

The org-mode setup is currently 3 fold:
 - org, for base functionality
 - org-roam for indexing and discoverability
 - deft for searching

#+BEGIN_SRC emacs-lisp :tangle yes

(after! org
  (setq org-directory "~/Dropbox/zettel")
  (setq org-roam-directory "~/Dropbox/zettel")
  (setq deft-directory "~/Dropbox/zettel")
)

#+END_SRC

** Capturing
*** From Alfred
In support of: https://github.com/jjasghar/alfred-org-capture/blob/master/el/alfred-org-capture.el
In order to quickly capture something when I'm not in an emacs context:

#+begin_src emacs-lisp :tangle yes
    (setq org-default-notes-file
          (concat org-directory "/inbox/notes.org"))

#+end_src

#+begin_src emacs-lisp :tangle yes

    (defun make-orgcapture-frame ()
        "Create a new frame and run org-capture."
        (interactive)
        (make-frame '((name . "remember") (width . 120) (height . 32)
                        (top . 400) (left . 300)
                        (font . "-apple-Monaco-medium-normal-normal-*-16-*-*-*-m-0-iso10646-1")
                    ))
        (select-frame-by-name "remember")
        (org-capture))

#+end_src

** Publishing

#+begin_src emacs-lisp :tangle yes

(setq org-publish-project-alist
      '(

        ("garden-org"
            :base-directory "~/Dropbox/projects/MAINTAINED/garden"
            :base-extension "org"
            :publishing-directory "~/Dropbox/projects/MAINTAINED/garden/build"
            :recursive t
            :publishing-function org-pandoc-export-to-html5
            :headline-levels 3
            :auto-preamble t
        )

        ("garden-static"
            :base-directory "~/Dropbox/projects/MAINTAINED/garden"
            :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
            :publishing-directory "~/Dropbox/projects/MAINTAINED/garden/build"
            :recursive t
            :publishing-function org-publish-attachment
        )

        ("garden" :components ("garden-org" "garden-static"))

      ))
#+end_src

* Appearances
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
#+BEGIN_SRC emacs-lisp :tangle yes

(setq doom-font (font-spec :family "Fira Code" :size 14))

#+END_SRC

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
#+BEGIN_SRC emacs-lisp :tangle yes

(setq doom-theme 'doom-horizon)

#+END_SRC

* UI Defaults
** Defaults
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
#+BEGIN_SRC emacs-lisp

(setq display-line-numbers-type t)

#+END_SRC
** Treemacs
Find the treemacs config options[[https://github.com/Alexander-Miller/treemacs#installation][ here]]

#+begin_src emacs-lisp :tangle yes

(after! treemacs
  (treemacs-resize-icons 0)
  (setq treemacs-no-png-images t)
  )

#+end_src
* Elfeed / RSS
#+begin_src emacs-lisp :tangle yes
(setq rmh-elfeed-org-files (list "~/.doom.d/elfeed.org"))
(after! org
  (elfeed-org))
#+end_src

* Doom "docs"

Here are some additional functions/macros that could help you configure Doom:

- `load!' for loading external *.el files relative to this one
- `use-package' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
they are implemented.

* Dot Mode / GraphViz
#+begin_src emacs-lisp :tangle yes

(use-package! graphviz-dot-mode)

#+end_src

* Bindings

#+BEGIN_SRC emacs-lisp :tangle yes


;; This has to be done for some reason
;; Or else stuff doesn't load
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

(defun strickinato/open-ledger ()
  (interactive)
  (find-file "~/ledger/2020.journal")
  (end-of-buffer))

(defun strickinato/open-rss ()
  (interactive)
  (=rss)
  (elfeed-update))

(defun strickinato/open-npr ()
  (interactive)
  (eww "https://text.npr.org")
  (doom/window-maximize-buffer))

(defun strickinato/open-legible-news ()
  (interactive)
  (eww "https://legiblenews.com/")
  (doom/window-maximize-buffer))

(defun strickinato/open-cnn ()
  (interactive)
  (eww "https://lite.cnn.com/")
  (doom/window-maximize-buffer))

(after! pinboard
  (add-to-list 'auth-sources "~/.pinboard-auth" t))

(add-to-list 'auto-mode-alist '("\\.journal" . ledger-mode))

(map!
    :leader
    :desc "Open Ledger" :gn "n j" #'strickinato/open-ledger
    :desc "Launch Zetteldeft" :gn "n SPC" #'zetteldeft-deft-new-search
    :desc "New File" :gn "z n" #'zetteldeft-new-file
    :desc "New File and Link" :gn "z N" #'zetteldeft-deft-new-search-and-link
    )

(map!
    :leader
    :desc "Project Eshell" :gn "p SPC" #'project-eshell
    :desc "RSS" :gn "r r" #'strickinato/open-rss
    :desc "npr" :gn "r n" #'strickinato/open-npr
    :desc "legible news" :gn "r l" #'strickinato/open-legible-news
    :desc "cnn" :gn "r c" #'strickinato/open-cnn
    )
#+END_SRC

* Rust Mode
#+begin_src emacs-lisp :tangle yes

(setq rust-format-on-save t)

#+end_src
* Typescript
#+begin_src emacs-lisp :tangle yes

;; enable typescript-tslint checker
(after! flycheck
  (flycheck-add-mode 'javascript-eslint 'web-mode)
 )
#+end_src

