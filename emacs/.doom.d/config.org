* Directives
;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

* Personal Info

(Came w/ doom)

#+BEGIN_SRC emacs-lisp

(setq user-full-name "Aaron Strick"
      user-mail-address "aaronstrick@gmail.com")

#+END_SRC

* Org

* Appearances
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
#+BEGIN_SRC emacs-lisp :tangle yes

(setq doom-font (font-spec :family "Fira Code" :size 14))

#+END_SRC

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
#+BEGIN_SRC emacs-lisp :tangle yes

(setq doom-theme 'doom-horizon)

#+END_SRC

* UI Defaults
** Defaults
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
#+BEGIN_SRC emacs-lisp

(setq display-line-numbers-type t)

#+END_SRC


* Doom "docs"

Here are some additional functions/macros that could help you configure Doom:

- `load!' for loading external *.el files relative to this one
- `use-package' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
they are implemented.

* Dot Mode / GraphViz
#+begin_src emacs-lisp :tangle yes

(use-package! graphviz-dot-mode)

#+end_src

* Bindings

#+BEGIN_SRC emacs-lisp :tangle yes


;; This has to be done for some reason
;; Or else stuff doesn't load
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

(defun strickinato/open-ledger ()
  (interactive)
  (find-file "~/ledger/2020.journal")
  (end-of-buffer))

(defun strickinato/open-npr ()
  (interactive)
  (eww "https://text.npr.org")
  (doom/window-maximize-buffer))

(defun strickinato/open-legible-news ()
  (interactive)
  (eww "https://legiblenews.com/")
  (doom/window-maximize-buffer))

(defun strickinato/open-cnn ()
  (interactive)
  (eww "https://lite.cnn.com/")
  (doom/window-maximize-buffer))

(after! pinboard
  (add-to-list 'auth-sources "~/.pinboard-auth" t))

(add-to-list 'auto-mode-alist '("\\.journal" . ledger-mode))

(map!
    :leader
    :desc "Project Eshell" :gn "p SPC" #'project-eshell

    :desc "npr" :gn "r n" #'strickinato/open-npr
    :desc "legible news" :gn "r l" #'strickinato/open-legible-news
    :desc "cnn" :gn "r c" #'strickinato/open-cnn
    )
#+END_SRC

* Rust Mode
#+begin_src emacs-lisp :tangle yes

(setq rust-format-on-save t)

#+end_src
* Typescript
#+begin_src emacs-lisp :tangle yes

;; enable typescript-tslint checker
(after! flycheck
  (flycheck-add-mode 'javascript-eslint 'web-mode)
 )
#+end_src


* Second Brain stuff

#+begin_src emacs-lisp :tangle yes

(setq deft-directory "~/brain")
(setq deft-recursive t)
(setq deft-use-filename-as-title t)
(map!
    :leader
    :desc "Deft File" :gn "n f" #'deft-find-file)


;; https://emacs.stackexchange.com/questions/71100/pasting-images-from-clipboard-into-orgmode
(after! org-download
      (setq org-download-method 'directory)
      (setq org-download-image-dir (concat (file-name-sans-extension (buffer-file-name)) "-img"))
      (setq org-download-image-org-width 600)
      (setq org-download-link-format "[[file:%s]]\n"
        org-download-abbreviate-filename-function #'file-relative-name)
      (setq org-download-link-format-function #'org-download-link-format-function-default))
#+end_src
